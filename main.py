import threading
import select
import subprocess
import alsaaudio
import socket

from gi.repository import Notify
from gi.repository import GObject

import gtk
from daemon import Daemon as d
import time
import sys
import traceback

import subprocess

from time import gmtime, strftime, sleep

logstatus = True

if (logstatus):
        import logging
        logging.basicConfig(filename='audiojackermsgs.log',level=logging.DEBUG)

#volume
currVolume = 0

#
#Class listens for audiojack events
class AudioJackEventHandler(object):
        def __init__(self):
                self.subscribers = []
        def subscribe(self,somefunction):
                self.subscribers.append(somefunction)
        def unsubscribe(self,somefunction):
                self.subscribers.remove(somefunction)
        def start(self):
                t = threading.Thread(target=self.reallystart)
                t.daemon = True
                t.start()
        def reallystart(self):
                process = subprocess.Popen('acpi_listen', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		while True:
			#the items to be read by process
			reads = [process.stderr.fileno(), process.stdout.fileno()]
			returned = select.select(reads, [], [])
			for readydata in returned[0]:
				if (readydata == process.stdout.fileno()):
					self.notify(process.stdout.readline())
				#if (readydata == process.stderr.fileno()):
				#	print("stderr says {}".format(process.stderr.readline()))
        def notify(self,someevent):
                for sub in self.subscribers:
                        sub(someevent)
#
#Class listens for .. events
class ComputerStateEventHandler(object):
        def __init__(self):
                self.subscribers = []
                self.s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
                self.s.connect("/var/run/acpid.socket")
        def subscribe(self,somefunction):
                self.subscribers.append(somefunction)
        def unsubscribe(self,somefunction):
                self.subscribers.remove(somefunction)
        def start(self):
                t = threading.Thread(target=self.reallystart)
                t.daemon = True
                t.start()
        def reallystart(self):
                while 1:
                    for event in self.s.recv(4096).split('\n'):
                        event=event.split(' ')
                        if len(event)<2: continue
                        if event[0]=='button/lid':
                            if event[2]=='open':
                                self.notify('lid open')
                            elif event[2]=='close':
                                self.notify('lid closed')
        def notify(self,someevent):
                for sub in self.subscribers:
                        sub(someevent)

#
#method for running commands
def runcmd(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out, err = p.communicate()
    return (out,err)
#
#method for retrieving current sound level
def getsoundlevel():
        out, err = runcmd('echo `(pactl list sinks | grep "Volume: 0:")| awk \'{print $3}\'`')
        return out
def setsoundlevel(volume):
        out,err = runcmd('pactl set-sink-volume 0 {}'.format(volume))

#method to be called with the events generated by audio jack
def audiojackresponder(someeventstring):
        if (logstatus):
                logging.debug('{0}-audio jack event detected'.format(strftime("%Y-%m-%d %H:%M:%S")))

        global currVolume
        tmpvolume = getsoundlevel()
        if tmpvolume!="0%":
            currVolume = tmpvolume

        someeventstring = someeventstring.rstrip()
        if (someeventstring=="jack/headphone HEADPHONE unplug"):
                setsoundlevel('0%')
        elif (someeventstring=="jack/headphone HEADPHONE plug"):
                setsoundlevel(currVolume)
        elif (someeventstring.startswith("button/mute MUTE")):
                print('mute pressed')

class VolumeControlDialog(GObject.Object):
    def __init__(self):

        super(VolumeControlDialog, self).__init__()
        self.app_name = "audiojacker"
        self.title = "audio status"
        self.text = "Hello World"
        self.icon_path = "/usr/share/icons/HighContrast/22x22/apps/firefox.png"
        # lets initialise with the application name
        Notify.init(self.app_name)


    def send_notification(self):
        n = Notify.Notification.new(self.title, self.text, self.icon_path)
        n.show()


# method for changing audio state back to what it was
def changestate_cb(n, action):
        assert action == "ignore"
        setsoundlevel(currVolume)
        gtk.main_quit()
def donotchangestate_cb(n, action):
        assert action == "ignore"
        gtk.main_quit()

import pynotify
def askunmute():
        try:
                title = "audiojacker"
                msg = "Audio was open muted on lid close. unmute?"
                pynotify.init(title)
                notif = pynotify.Notification(title, msg, )
                notif.set_urgency(pynotify.URGENCY_CRITICAL)
                notif.add_action("ignore","No", donotchangestate_cb)
                notif.add_action("ignore","Yes", changestate_cb)
                notif.show()
                gtk.main()
        except Exception, e:
                if (logstatus):
                        logging.exception(e)

import dbus
import dbus.glib

detectunlockloop = None

def screen_unlock_callback(state):
        if (logstatus):
                logging.debug('{0}-screen unlock callback called!! state is {1}'.format(strftime("%Y-%m-%d %H:%M:%S"), state))
        if (state==1):
                if (logstatus):
                        logging.debug('{0}-about to call unmute'.format(strftime("%Y-%m-%d %H:%M:%S")))
                detectunlockloop.quit()

                #my = VolumeControlDialog()
                #my.send_notification()
                #askunmute()
                sleep(15)
                askunmute()
                #setsoundlevel("60%")
                #import os
                #os.system('vlc \"/home/adeeb/Downloads/J. Cole - Roll Call.mp3\"')

                if (logstatus):
                        logging.debug('{0}-called unmute'.format(strftime("%Y-%m-%d %H:%M:%S")))

#method to be called with the events of the computer lid
def computerlidresponder(someeventstring):
        if (someeventstring=='lid closed'):
                setsoundlevel('0%')
        elif (someeventstring=='lid open'):
                if (logstatus):
                        logging.debug('{}-lid open response called!'.format(strftime("%Y-%m-%d %H:%M:%S")))
                try:
                        if (logstatus):
                                logging.debug('{}-about to start dbus service!'.format(strftime("%Y-%m-%d %H:%M:%S")))

                        session_bus = dbus.SessionBus()
                        session_bus.add_signal_receiver(screen_unlock_callback,'ActiveChanged','org.gnome.ScreenSaver')

                        import gobject
                        global detectunlockloop
                        detectunlockloop = gobject.MainLoop()
                        detectunlockloop.run()

                        if (logstatus):
                                logging.debug('{}-about to start dbus loop!'.format(strftime("%Y-%m-%d %H:%M:%S")))
                                logging.debug('{}-finished dbus loop!'.format(strftime("%Y-%m-%d %H:%M:%S")))

                except Exception, e:
                        if (logstatus):
                                logging.exception(e)
#
#AudioJack daemon
class AudioJack(d):
        def run(self):

                ajeh = AudioJackEventHandler()
                ajeh.subscribe(audiojackresponder)
                ajeh.start()

                global currVolume
                currVolume = getsoundlevel()

                cseh = ComputerStateEventHandler()
                cseh.subscribe(computerlidresponder)
                cseh.start()

                while True:
                        pass

if __name__=='__main__':
        daemonaudiojack = AudioJack('/tmp/audiojacker.pid')
        if len(sys.argv) == 2:
                if 'start' == sys.argv[1]:
                        daemonaudiojack.start()
                elif 'stop' == sys.argv[1]:
                        daemonaudiojack.stop()
                elif 'restart' == sys.argv[1]:
                        daemonaudiojack.restart()
                else:
                        print "Unknown command"
                        sys.exit(2)
                sys.exit(0)
        else:
                print "usage: %s start|stop|restart" % sys.argv[0]
                sys.exit(2)
