#
#
# Copyright 2015 Zola Mahlaza <adeebnqo@gmail.com>
# License: http://creativecommons.org/licenses/by-sa/3.0/
#
#

import threading
import select
import subprocess
import alsaaudio
import socket
import re

from daemon import Daemon as daemon
import time
import sys
import traceback

import subprocess

from time import gmtime, strftime, sleep

logstatus = True

if (logstatus):
        import logging
        logging.basicConfig(filename='audiojackermsgs.log',level=logging.DEBUG)

#
#Class listens for audiojack events
class AudioJackEventHandler(object):
        def __init__(self):
                self.subscribers = []
        def subscribe(self,somefunction):
                self.subscribers.append(somefunction)
        def unsubscribe(self,somefunction):
                self.subscribers.remove(somefunction)
        def start(self):
                t = threading.Thread(target=self.reallystart)
                #t.daemon = True
                t.start()
        def reallystart(self):
                process = subprocess.Popen('acpi_listen', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		while True:
			#the items to be read by process
			reads = [process.stderr.fileno(), process.stdout.fileno()]
			returned = select.select(reads, [], [])
			for readydata in returned[0]:
				if (readydata == process.stdout.fileno()):
					self.notify(process.stdout.readline())
				#if (readydata == process.stderr.fileno()):
				#	print("stderr says {}".format(process.stderr.readline()))
        def notify(self,someevent):
                for sub in self.subscribers:
                        sub(someevent)
#
#Class listening events made by the computer lid
class ComputerStateEventHandler(object):
        def __init__(self):
                self.subscribers = []
                self.s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
                self.s.connect("/var/run/acpid.socket")
        def subscribe(self,somefunction):
                self.subscribers.append(somefunction)
        def unsubscribe(self,somefunction):
                self.subscribers.remove(somefunction)
        def start(self):
                t = threading.Thread(target=self.reallystart)
                #t.daemon = True
                t.start()
        def reallystart(self):
                while 1:
                    for event in self.s.recv(4096).split('\n'):
                        event=event.split(' ')
                        if len(event)<2: continue
                        if event[0]=='button/lid':
                            if event[2]=='open':
                                self.notify('lid open')
                            elif event[2]=='close':
                                self.notify('lid closed')
        def notify(self,someevent):
                for sub in self.subscribers:
                        sub(someevent)

#
#AudioJack daemon
class AudioJack(daemon):
        def run(self):
                ajeh = AudioJackEventHandler()
                ajeh.subscribe(self.audiojackresponder)
                ajeh.start()

                cseh = ComputerStateEventHandler()
                cseh.subscribe(self.computerlidresponder)
                cseh.start()

                self.listsinks()
                
                while True:
                        pass

        #method to be called with the events of the computer lid
        def computerlidresponder(self, someeventstring):
                if (someeventstring=='lid closed'):
                        if not self.ismute():
                                self.togglemute()
                        if (logstatus):
                                logging.debug('{0}-computer lid has been closed'.format(strftime("%Y-%m-%d %H:%M:%S")))
                elif (someeventstring=='lid open'):
                        if (logstatus):
                                logging.debug('{}-lid open response called!'.format(strftime("%Y-%m-%d %H:%M:%S")))
                        #ask the user if they want to unmute computer here

        #method to be called with the events generated by audio jack
        def audiojackresponder(self, someeventstring):
                if (logstatus):
                        logging.debug('{0}-audio jack event detected'.format(strftime("%Y-%m-%d %H:%M:%S")))

                someeventstring = someeventstring.rstrip()
                if (someeventstring=="jack/headphone HEADPHONE unplug"):
                        #muting
                        if not self.ismute():
                            if (logstatus):
                                    logging.debug('{0}-muting computer'.format(strftime("%Y-%m-%d %H:%M:%S")))
                            self.togglemute()
                elif (someeventstring=="jack/headphone HEADPHONE plug"):
                        #unmuting
                        if self.ismute():
                            if (logstatus):
                                    logging.debug('{0}-unmuting computer'.format(strftime("%Y-%m-%d %H:%M:%S")))
                            self.togglemute()
                elif (someeventstring.startswith("button/mute MUTE")):
                        if (logstatus):
                                logging.debug('{0}-computer has bee manually muted.'.format(strftime("%Y-%m-%d %H:%M:%S")))

        #methof for toggling mute in sink
        def togglemute(self, sink=1):
                return self.runcmd("pactl set-sink-mute {} toggle".format(sink))
        #method for checking 0'th sink is muted
        def ismute(self):
                (out, err) = self.runcmd("pactl list sinks")
                sinks = re.split("Sink #(\d)+", out)
                if "Mute: no" in sinks[0]:
                    return False
                elif "Mute: yes" in sinks[0]:
                    return True
                return None
        #method for running commands
        def runcmd(self, cmd):
                p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
                out, err = p.communicate()
                return (out,err)

if __name__=='__main__':
        daemonaudiojack = AudioJack('/tmp/audiojacker.pid')
        if len(sys.argv) == 2:
                if 'start' == sys.argv[1]:
                        daemonaudiojack.start()
                elif 'stop' == sys.argv[1]:
                        daemonaudiojack.stop()
                elif 'restart' == sys.argv[1]:
                        daemonaudiojack.restart()
                else:
                        print "Unknown command"
                        sys.exit(2)
                sys.exit(0)
        else:
                print "usage: %s start|stop|restart" % sys.argv[0]
                sys.exit(2)
